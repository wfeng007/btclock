<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<!-- place holder config resource -->
	<bean id="placeholderConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:key.properties</value>
			</list>
		</property>
	</bean>

	<!-- 转换枚举 -->
    <bean id="TimeUnit.MILLISECONDS" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">    
        <property name="staticField" value="java.util.concurrent.TimeUnit.MILLISECONDS" />    
    </bean>    
                 
    <bean id="executorService"
		class="java.util.concurrent.ThreadPoolExecutor" destroy-method="shutdownNow">
		<constructor-arg index="0" value="10"/>
		<constructor-arg index="1" value="10"/>
		<constructor-arg index="2" value="0"/>
		<constructor-arg index="3" ref="TimeUnit.MILLISECONDS"/>
		<constructor-arg index="4">
			<bean class="java.util.concurrent.LinkedBlockingQueue"/>
		</constructor-arg>
	</bean>                                  

	<bean id="threadPoolTaskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" >
		<!-- 核心线程数，默认为1 -->
		<property name="corePoolSize" value="10" />
		<!-- 最大线程数，默认为Integer.MAX_VALUE -->
		<property name="maxPoolSize" value="50" />
		<!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE 
		<property name="queueCapacity" value="1000" />
		 -->
		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="300" />

		<!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
		<property name="rejectedExecutionHandler">
			<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
			<!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
			<!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>
	
	<!-- kanban -->
	<bean id="kanban" class="summ.btc.btclock.Kanban" 
		init-method="init" destroy-method="release" >
	</bean>
    
	<!-- Trader -->
	<bean id="okcoinTrader" class="summ.btc.btclock.okcoin.OkcoinTrader"
		init-method="init">
		<property name="apiKey" value="${btclock.okcoin._all_.apiKey}"/>
		<property name="secretKey" value="${btclock.okcoin._all_.secretKey}"/>
		<property name="urlPrex" value="${btclock.okcoin.OkcoinTrader.urlPrex}"/>
	</bean>
	
	<!-- okcoinMarketProbe -->
	<bean id="okcoinMarketProbe" class="summ.btc.btclock.okcoin.OkcoinMarketProbe"
		 init-method="init">
		<property name="apiKey" value="${btclock.okcoin._all_.apiKey}"/>
		<property name="secretKey" value="${btclock.okcoin._all_.secretKey}"/>
		<property name="url" value="${btclock.okcoin.OkcoinMarketProbe.url}"/>
		<property name="kanban" ref="kanban"/>
	</bean>
	
	<!-- okcoinMarketProbe -->
	<bean id="marketTrader" class="summ.btc.btclock.MarketTrader">
		<property name="threadpool" ref="executorService"/>
		<property name="trader" ref="okcoinTrader"/>
		<property name="kanban" ref="kanban"/>
	</bean>
	
	
	<!-- SimpleClockDecider -->
	<bean id="simpleClockDecider" class="summ.btc.btclock.SimpleClockDecider">
		<property name="kanban" ref="kanban"/>
		<property name="marketTrader" ref="marketTrader"/>
	</bean>
	
</beans>